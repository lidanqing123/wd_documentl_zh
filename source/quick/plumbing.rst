
添加管道
=========

通过管道，我们意味着将任务链接在一起，形成复杂的管道。如何在WDL中实现呢?

毫不费力的优雅，就是这样。

概述
-----


简单的连接
^^^^^^^^^^^
至此，您已经知道如何在您的工作流脚本中包含多个任务。如果你在关注变量的部分，你甚至知道如何将一个任务的输出连接到下一个任务的输入。这使您能够构建任意长度的线性或简单的分支和合并工作流，在任务之间连接单个或多个输入和输出——除了我们已经介绍的之外，没有任何其他类型的代码。

切换和迭代逻辑
^^^^^^^^^^^^^^^
除了这些基本的连接功能之外，有时还需要能够在不同的路径之间进行切换，并对数据集进行迭代，可以是串联的，也可以是并行的。为此，我们需要更多的代码，但是不要担心……你不需要写任何东西!我们将利用WDL语法的各个方面和一些方便的内置特性，这些特性使添加这个逻辑变得非常容易。这是我们最喜欢的功能.在WDL中是分散收集并行性(scatter-gather parallelism)，当您需要将相同的命令应用于可以视为独立单元的数据子集时，这是加快执行速度的好方法。下面是在WDL中定义的两个附加特性(循环和条件)，它们还没有得到Cromwell执行引擎的完全支持，但是这个功能正在积极开发中。

通过代码重用提高效率
^^^^^^^^^^^^^^^^^^^^^
最后，您会发现您经常需要在不同的上下文中做类似的事情。与其将相关代码复制到多个地方(这样会生成更多的代码来维护和更新)，还不如偷懒，巧妙地重用代码，如果有问题，可以通过任务别名来解决.  e.g. 以不同的方式运行相同的工具，或者,通过大量导入工作流(抱歉，后者还没有完全实现，但是它在开发路线图上。)


条件(if/else)
----------------



线性链接
---------

多输入/多输出
--------------

散集的并行性
-------------

任务混叠
---------



使用所有这些将对任务的调用组装到工作流中的选项，我们可以构建一些相当复杂的数据处理和分析管道。诚然，刚开始这似乎有点难以承受，但不要担心——我们是来帮忙的!一旦你完成了WDL的基础知识，我们将向你展示一系列的教程，展示如何将每个选项应用到我们在基因组学中遇到的一些经典用例中。但首先，我们将向您展示如何检查工作流的语法是否有效。虽然没有判断的健全的工作流程设计!



